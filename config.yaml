#################
# Local options #
#################

# The directory to which files will be copied/moved when adding them to the library.
# directory: ~/sandbox/tagged
directory: /mnt/morrowind/music

# Path to the beets library file.
# library: ~/sandbox/beets/library.db
library: /mnt/morrowind/beets/library.db


##################
# Global options #
##################

# Either yes or no, indicating whether the autotagger should use multiple threads. You may want to disable this when
# debugging problems with the autotagger.
threaded: yes

# Either yes or no, indicating whether matched albums should have their year, month, and day fields set to the release
# date of the original version of an album rather than the selected version of the release. That is, if this option is
# turned on, then year will always equal original_year and so on.
original_date: no

# A boolean controlling the track numbering style on multi-disc releases. By default (per_disc_numbering: no), tracks
# are numbered per-release, so the first track on the second disc has track number N+1 where N is the number of tracks
# on the first disc. If this per_disc_numbering is enabled, then the first (non-pregap) track on each disc always has
# track number 1.
per_disc_numbering: yes

# When importing album art, the name of the file (without extension) where the cover art image should be placed.
art_filename: $album

# Format to use when listing albums with list and other commands.
format_album: "$albumartist - $album ($original_year/RE-$year) {$label $catalognum}"

# Format to use when listing individual items with the list command and other commands that need to print out items.
format_item: "$artist - $album - $disc-$track. $title ($length) ($original_year/RE-$year) [$media $format $bitdepth/$samplerate $bitrate] {$label $catalognum}"

# Set the maximum number of characters in a filename, after which names will be truncated.
max_filename_length: 255

# A set of regular expression/replacement pairs to be applied to all filenames created by beets.
replace:
    '[\\/]': _        # forward and back slashes
    '^\.': _          # leading dots
    '[\x00-\x1f]': _  # control characters
    # '[<>:"\?\*\|]': _ # Windows “reserved characters”
    # '\.$': _          # trailing dot
    # '\s+$': ''        # trailing whitespace
    # '^\s+': ''        # leading whitespace
    # '^-': _           # leading dashes

# A list of plugin module names to load.
plugins:
    - albumtypes
    - badfiles
    # - beatport
    # - beatport4
    - bucket
    # - deezer
    - discogs
    - edit
    - embedart
    - extrafiles
    - fetchart
    - hook
    - info
    - inline
    - lastgenre
    - missing
    - rewrite
    # - spotify
    - the


##############
# UI options #
##############

ui:
    # Either yes or no; whether to use color in console output (currently only in the import command).
    color: yes


####################
# Importer options #
####################

import:
    # A list of locale names to search for preferred aliases. For example, setting this to en uses the transliterated
    # artist name “Pyotr Ilyich Tchaikovsky” instead of the Cyrillic script for the composer’s name when tagging from
    # MusicBrainz. You can use a space-separated list of language abbreviations, like en jp es, to specify a preference
    # order.
    languages: en
    
    # Either yes or no, controlling whether metadata (e.g., ID3) tags are written to files when using beet import.
    write: yes
    
    # Either yes or no, indicating whether to copy files into the library directory when using beet import.
    copy: yes
    
    # Either yes or no, indicating whether to move files into the library directory when using beet import.
    move: no
    
    # Either yes or no (default), controlling whether existing metadata is discarded when a match is applied.
    from_scratch: yes
    
    # Whether the importer UI should show detailed information about each match it finds. When enabled, this mode prints
    # out the title of every track, regardless of whether it matches the original metadata.
    detail: yes
    
    # Ring the terminal bell to get your attention when the importer needs your input.
    bell: yes
    
    # Specifies a filename where the importer’s log should be kept.
    # log: ~/sandbox/beets/import.log
    log: /mnt/morrowind/beets/import.log


#######################
# MusicBrainz options #
#######################

musicbrainz:
    # The number of matches returned when sending search queries to the MusicBrainz server.
    searchlimit: 10

    # Use MusicBrainz genre tags to populate (and replace if it’s already set) the genre tag. This will make it a list
    # of all the genres tagged for the release and the release-group on MusicBrainz, separated by “; ” and sorted by the
    # total number of votes.
    # genres: yes


###############################
# Autotagger matching options #
###############################

match:
    # In addition to comparing the tagged metadata with the match metadata for similarity, you can also specify an
    # ordered list of preferred countries and media types.
    preferred:
        countries: ['XW', US', 'CA', 'EU', 'GB|UK']
        media: ['CD']
        # original_year: yes


#################
# inline plugin #
#################

# The inline plugin lets you use Python to customize your path formats. Using it, you can define template fields in your
# beets configuration file and refer to them from your template strings in the paths.

# Under this key, every line defines a new template field; the key is the name of the field (you’ll use the name to
# refer to the field in your templates) and the value is a Python expression or function body. The Python code has all
# of a track’s fields in scope, so you can refer to any normal attributes (such as artist or title) as Python variables.
item_fields:
    multidisc: 1 if disctotal > 1 else 0
    discnum: f"{disc:1d}" if disctotal < 10 else f"{disc:02d}"
    disc_and_track: f"{disc:1d}-{track:02d}" if disctotal > 1 else f"{track:02d}"

# You can also define fields for album templates.
album_fields:
    release: |
        if label and catalognum:
            return f" {{{label} {catalognum}}}"
        elif label:
            return f" {{{label}}}"
        elif catalognum:
            return f" {{{catalognum}}}"
        else:
            return ""

    # By default $samplerate rounds to the nearest integer but I would like a more precise 44.1kHz, 88.2kHz, etc.
    samplerate_precise: |
        f_kHz = sum(item.samplerate for item in items) / len(items) / 1000
        if f_kHz.is_integer():
            return str(int(f_kHz)) + "kHz"
        else:
            return str(f_kHz) + "kHz"

    reissue: |
        if original_year and (year != original_year):
            return f" [RE-{year}]"
        else:
            return ""

    album_comment: |
        if albumdisambig:
            return f" ({albumdisambig})"
        else:
            return ""


#################
# bucket plugin #
#################

# The bucket plugin groups your files into buckets folders representing ranges. This kind of organization can classify
# your music by periods of time (e.g,. 1960s, 1970s, etc.), or divide overwhelmingly large folders into smaller
# subfolders by grouping albums or artists alphabetically (e.g. A-F, G-M, N-Z).

bucket:
    # Ranges to use for all substitutions occurring on textual fields.
    bucket_alpha:
    - '#-!'
    - '0-9'
    - 'A'
    - 'B'
    - 'C'
    - 'D'
    - 'E'
    - 'F'
    - 'G'
    - 'H'
    - 'I'
    - 'J'
    - 'K'
    - 'L'
    - 'M'
    - 'N'
    - 'O'
    - 'P'
    - 'Q'
    - 'R'
    - 'S'
    - 'T'
    - 'U'
    - 'V'
    - 'W'
    - 'X'
    - 'Y'
    - 'Z'
    
    # A `range: regex` mapping (one per line) where range is one of the bucket_alpha ranges and value is a regex that
    # overrides original range definition.    
    bucket_alpha_regex:
        '#-!': ^[^0-9a-zA-ZåÅäÄöÖ]


###################
# fetchart plugin #
###################

# The fetchart plugin retrieves album art images from various sources on the Web and stores them as image files.

fetchart:
    # Enable automatic album art fetching during import.
    auto: yes
    
    # If enabled, fetchart retrieves artwork in the highest resolution it can find.
    high_resolution: yes
    
    # A maximum image width to downscale fetched images if they are too big. The resize operation reduces image width
    # to at most maxwidth pixels. The height is recomputed so that the aspect ratio is preserved.
    maxwidth: 1500

    # The maximum size of a target piece of cover art in bytes. When using an ImageMagick backend this sets
    # -define jpeg:extent=max_filesize. Using PIL this will reduce JPG quality by up to 50% to attempt to reach the
    # target filesize. Neither method is guaranteed to reach the target size, however in most cases it should succeed.
    max_filesize: 1572864  # 1.5 MiB = 1.5 * 1024^2 bytes

    # List of sources to search for images. An asterisk * expands to all available sources.
    sources:
        - filesystem
        - coverart: release
        - itunes
        - coverart: releasegroup
        - '*'


###################
# embedart plugin #
###################

embedart:
    # Enable automatic album art embedding.
    auto: yes
    
    # Avoid embedding album art for files that already have art embedded.
    ifempty: no
    
    # Automatically remove the album art file for the album after it has been embedded.
    remove_art_file: no
  
    # Only images with a width bigger or equal to minwidth are considered as valid album art candidates.
    # minwidth: 1000

    # A maximum width to downscale images before embedding them (the original image file is not altered). The resize
    # operation reduces image width to at most maxwidth pixels. The height is recomputed so that the aspect ratio is
    # preserved.
    # maxwidth: 1000


####################
# lastgenre plugin #
####################

# The lastgenre plugin fetches tags from Last.fm and assigns them as genres to your albums and items.

lastgenre:
    # Fetch genres automatically during import.
    auto: yes
    
    # Number of genres to fetch.
    count: 2
    
    # Sort genres by the most to least specific, rather than most to least popular. 
    prefer_specific: no


###################
# badfiles plugin #
###################

# The badfiles plugin adds a beet bad command to check for missing and corrupt files.

badfiles:
    check_on_import: yes
    commands:
        mp3: mp3val
        flac: flac --test --warnings-as-errors


##################
# missing plugin #
##################

# This plugin adds a new command, missing or miss, which finds and lists, for every album in your collection, which or
# how many tracks are missing. Listing missing files requires one network call to MusicBrainz. Merely counting missing
# files avoids any network calls.

missing:
    # A specific format with which to print every track.
    format: $albumartist - $album - $title
    
    # Print a count of missing tracks per album.
    count: no
    
    # Print a single count of missing tracks in all albums.
    total: no


###############
# edit plugin #
###############

# The edit plugin lets you modify music metadata using your favorite text editor.

edit:
    # A space-separated list of item fields to include in the editor by default.
    itemfields: track title artist albumartist album year original_year media format label catalognum comp albumdisambig
    
    # The same when editing albums.
    albumfields: track title artist albumartist album year original_year media format label catalognum comp albumdisambig


#####################
# albumtypes plugin #
#####################

# The albumtypes plugin adds the ability to format and output album types, such as “Album”, “EP”, “Single”, etc.

albumtypes:
    # An ordered list of album type to format mappings. The order of the mappings determines their order in the output.
    # If a mapping is missing or blank, it will not be in the output.
    types:
        # - album: "Album"
        - ep: "EP"
        - single: "Single"
        - soundtrack: "Soundtrack"
        - live: "Live"
        - compilation: "Anthology"
        - remix: "Remix"
    ignore_va: compilation
    bracket: "[]"


##################
# rewrite plugin #
##################

# The rewrite plugin lets you easily substitute values in your templates and path formats.

rewrite:
    media Digital Media: WEB
    media File: WEB
    media CD-R: CD
    media 12" Vinyl: Vinyl


#####################
# extrafiles plugin #
#####################

# A plugin for beets that copies additional files and directories during the import process.

extrafiles:
    patterns:
        scans:
          - "[sS]can/"
          - "[sS]cans/"
        cue:
          - "*.cue"
        log:
          - "*.log"
        cue_disc1:
          - "Disc 1/*.cue"
        log_disc1:
          - "Disc 1/*.log"
        cue_disc2:
          - "Disc 2/*.cue"
        log_disc2:
          - "Disc 2/*.log"

    paths:
        scans: $albumpath/Scans
        cue: $albumpath/$album
        log: $albumpath/$album
        cue_disc1: $albumpath/Disc 1/$album - Disc 1
        log_disc1: $albumpath/Disc 1/$album - Disc 1
        cue_disc2: $albumpath/Disc 2/$album - Disc 2
        log_disc2: $albumpath/Disc 2/$album - Disc 2


#############################
# Path format configuration #
#############################

paths:
    default: %bucket{%the{$albumartist},alpha}/%the{$albumartist}/$albumartist - $album$album_comment $atypes (%if{$original_year,$original_year,$year})$reissue$release [%if{$media,$media }$format %if{$bitdepth,${bitdepth}bit }$samplerate_precise]/%if{$multidisc,Disc $discnum/}$disc_and_track. $title
    comp: Compilations/%bucket{%the{$album},alpha}/%the{$album}$album_comment (%if{$original_year,$original_year,$year})$release [%if{$media,$media }$format %if{$bitdepth,${bitdepth}bit }$samplerate_precise]$reissue/$disc_and_track. $title
    albumtype:soundtrack: Soundtracks/%the{$album}$album_comment (%if{$original_year,$original_year,$year})$release [%if{$media,$media }$format %if{$bitdepth,${bitdepth}bit }$samplerate_precise]$reissue/$disc_and_track. $title


###############
# hook plugin #
###############

# Internally, beets uses events to tell plugins when something happens. For example, one event fires when the importer
# finishes processes a song, and another triggers just before the beet command exits. The hook plugin lets you run
# commands in response to these events.

hook:
    hooks:
        # - event: album_imported
        #   command: printf "\033[38;5;76m √\033[m \033[1m\033[m \033[38;5;30m{album}\033[m\n"
        - event: item_copied
          command: printf "Copied \033[32m\"{destination}\"\033[39m\n"
