#################
# Local options #
#################

# The directory to which files will be copied/moved when adding them to the library.
directory: ~/sandbox/tagged/

# Path to the beets library file.
library: ~/beets/library.db


##################
# Global options #
##################

# Either yes or no, indicating whether the autotagger should use multiple threads. You may want to disable this when
# debugging problems with the autotagger.
threaded: yes

# Either yes or no, indicating whether matched albums should have their year, month, and day fields set to the release
# date of the original version of an album rather than the selected version of the release. That is, if this option is
# turned on, then year will always equal original_year and so on.
original_date: yes

# A boolean controlling the track numbering style on multi-disc releases. By default (per_disc_numbering: no), tracks
# are numbered per-release, so the first track on the second disc has track number N+1 where N is the number of tracks
# on the first disc. If this per_disc_numbering is enabled, then the first (non-pregap) track on each disc always has
# track number 1.
per_disc_numbering: yes

# When importing album art, the name of the file (without extension) where the cover art image should be placed.
art_filename: cover

# Format to use when listing albums with list and other commands.
format_album: "$albumartist - $album"

# Format to use when listing individual items with the list command and other commands that need to print out items.
format_item: "[$format] $artist - $album - $title [$bitdepth/$samplerate $bitrate, $length]"

# A space-separated list of plugin module names to load.
plugins: discogs inline bucket info edit the fetchart embedart lastgenre badfiles missing


##############
# UI options #
##############

ui:
    # Either yes or no; whether to use color in console output (currently only in the import command).
    color: yes


####################
# Importer options #
####################

import:
    # A list of locale names to search for preferred aliases. For example, setting this to en uses the transliterated
    # artist name “Pyotr Ilyich Tchaikovsky” instead of the Cyrillic script for the composer’s name when tagging from
    # MusicBrainz. You can use a space-separated list of language abbreviations, like en jp es, to specify a preference
    # order.
    languages: en
    
    # Either yes or no, controlling whether metadata (e.g., ID3) tags are written to files when using beet import.
    write: yes
    
    # Either yes or no, indicating whether to copy files into the library directory when using beet import.
    copy: yes
    
    # Either yes or no, indicating whether to move files into the library directory when using beet import.
    move: no
    
    # Either yes or no (default), controlling whether existing metadata is discarded when a match is applied.
    from_scratch: yes
    
    # Whether the importer UI should show detailed information about each match it finds. When enabled, this mode prints
    # out the title of every track, regardless of whether it matches the original metadata.
    detail: yes
    
    # Ring the terminal bell to get your attention when the importer needs your input.
    bell: yes
    
    # Specifies a filename where the importer’s log should be kept.
    log: ~/beets/import.log


#######################
# MusicBrainz options #
#######################

musicbrainz:
    # Use MusicBrainz genre tags to populate (and replace if it’s already set) the genre tag. This will make it a list
    # of all the genres tagged for the release and the release-group on MusicBrainz, separated by “; ” and sorted by the
    # total number of votes.
    genres: yes


###############################
# Autotagger matching options #
###############################

match:
    # In addition to comparing the tagged metadata with the match metadata for similarity, you can also specify an
    # ordered list of preferred countries and media types.
    preferred:
        countries: ['XW', US', 'CA', 'EU', 'GB|UK']
        media: ['Digital Media|File', 'Digital Media', 'CD']
        original_year: yes


#################
# inline plugin #
#################

# The inline plugin lets you use Python to customize your path formats. Using it, you can define template fields in your
# beets configuration file and refer to them from your template strings in the paths.

# Under this key, every line defines a new template field; the key is the name of the field (you’ll use the name to
# refer to the field in your templates) and the value is a Python expression or function body. The Python code has all
# of a track’s fields in scope, so you can refer to any normal attributes (such as artist or title) as Python variables.
item_fields:
    multidisc: 1 if disctotal > 1 else 0
    disc_and_track: u'%1i-%02i' % (disc, track) if disctotal > 1 else u'%02i' % (track)

# You can also define fields for album templates.
album_fields:   
    albumartist_bilingual: u'%s' % (albumartist) if albumartist == albumartist_sort else u'%s (%s)' % (albumartist_sort, albumartist)


#################
# bucket plugin #
#################

# The bucket plugin groups your files into buckets folders representing ranges. This kind of organization can classify
# your music by periods of time (e.g,. 1960s, 1970s, etc.), or divide overwhelmingly large folders into smaller
# subfolders by grouping albums or artists alphabetically (e.g. A-F, G-M, N-Z).

bucket:
    # Ranges to use for all substitutions occurring on textual fields.
    bucket_alpha:
    - '#-!'
    - '0-9'
    - 'A'
    - 'B'
    - 'C'
    - 'D'
    - 'E'
    - 'F'
    - 'G'
    - 'H'
    - 'I'
    - 'J'
    - 'K'
    - 'L'
    - 'M'
    - 'N'
    - 'O'
    - 'P'
    - 'Q'
    - 'R'
    - 'S'
    - 'T'
    - 'U'
    - 'V'
    - 'W'
    - 'X'
    - 'Y'
    - 'Z'
    
    # A `range: regex` mapping (one per line) where range is one of the bucket_alpha ranges and value is a regex that
    # overrides original range definition.    
    bucket_alpha_regex:
        '#-!': ^[^0-9a-zA-ZåÅäÄöÖ]


###################
# fetchart plugin #
###################

# The fetchart plugin retrieves album art images from various sources on the Web and stores them as image files.

fetchart:
    # If enabled, fetchart retrieves artwork in the highest resolution it can find.
    high_resolution: yes


####################
# lastgenre plugin #
####################

# The lastgenre plugin fetches tags from Last.fm and assigns them as genres to your albums and items.

lastgenre:
    # Fetch genres automatically during import.
    auto: yes
    
    # Number of genres to fetch.
    count: 2
    
    # Sort genres by the most to least specific, rather than most to least popular. 
    prefer_specific: yes


###################
# badfiles plugin #
###################

# The badfiles plugin adds a beet bad command to check for missing and corrupt files.

badfiles:
    check_on_import: yes
    commands:
        mp3: mp3val
        flac: flac --test --warnings-as-errors


##################
# missing plugin #
##################

# This plugin adds a new command, missing or miss, which finds and lists, for every album in your collection, which or
# how many tracks are missing. Listing missing files requires one network call to MusicBrainz. Merely counting missing
# files avoids any network calls.

missing:
    # A specific format with which to print every track.
    format: $albumartist - $album - $title
    
    # Print a count of missing tracks per album.
    count: no
    
    # Print a single count of missing tracks in all albums.
    total: no


###############
# edit plugin #
###############

# The edit plugin lets you modify music metadata using your favorite text editor.

edit:
    # A space-separated list of item fields to include in the editor by default.
    itemfields:  track title artist album year
    
    # The same when editing albums.
    albumfields: track title artist albumartist album year albumartist_bilingual

#############################
# Path format configuration #
#############################

paths:
    default: %bucket{%the{$albumartist},alpha}/%the{$albumartist_bilingual}/[$original_year] $album%aunique{}/$disc_and_track. $title
    singleton: %bucket{%the{$albumartist},alpha}/%the{$albumartist}/Non-Album/$title
    comp: Compilations/$album%aunique{}/$disc_and_track. $title
    albumtype:soundtrack: Soundtracks/$album%aunique{}/$disc_and_track. $title

